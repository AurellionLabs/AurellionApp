/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace LocationContract {
  export type LocationStruct = { lat: string; lng: string };

  export type LocationStructOutput = [lat: string, lng: string] & {
    lat: string;
    lng: string;
  };

  export type ParcelDataStruct = {
    startLocation: LocationContract.LocationStruct;
    endLocation: LocationContract.LocationStruct;
    startName: string;
    endName: string;
  };

  export type ParcelDataStructOutput = [
    startLocation: LocationContract.LocationStructOutput,
    endLocation: LocationContract.LocationStructOutput,
    startName: string,
    endName: string
  ] & {
    startLocation: LocationContract.LocationStructOutput;
    endLocation: LocationContract.LocationStructOutput;
    startName: string;
    endName: string;
  };

  export type JourneyStruct = {
    parcelData: LocationContract.ParcelDataStruct;
    journeyId: BytesLike;
    currentStatus: BigNumberish;
    sender: AddressLike;
    receiver: AddressLike;
    driver: AddressLike;
    journeyStart: BigNumberish;
    journeyEnd: BigNumberish;
    bounty: BigNumberish;
    ETA: BigNumberish;
  };

  export type JourneyStructOutput = [
    parcelData: LocationContract.ParcelDataStructOutput,
    journeyId: string,
    currentStatus: bigint,
    sender: string,
    receiver: string,
    driver: string,
    journeyStart: bigint,
    journeyEnd: bigint,
    bounty: bigint,
    ETA: bigint
  ] & {
    parcelData: LocationContract.ParcelDataStructOutput;
    journeyId: string;
    currentStatus: bigint;
    sender: string;
    receiver: string;
    driver: string;
    journeyStart: bigint;
    journeyEnd: bigint;
    bounty: bigint;
    ETA: bigint;
  };

  export type OrderStruct = {
    id: BytesLike;
    token: AddressLike;
    tokenId: BigNumberish;
    tokenQuantity: BigNumberish;
    requestedTokenQuantity: BigNumberish;
    price: BigNumberish;
    txFee: BigNumberish;
    customer: AddressLike;
    journeyIds: BytesLike[];
    nodes: AddressLike[];
    locationData: LocationContract.ParcelDataStruct;
    currentStatus: BigNumberish;
    contracatualAgreement: BytesLike;
  };

  export type OrderStructOutput = [
    id: string,
    token: string,
    tokenId: bigint,
    tokenQuantity: bigint,
    requestedTokenQuantity: bigint,
    price: bigint,
    txFee: bigint,
    customer: string,
    journeyIds: string[],
    nodes: string[],
    locationData: LocationContract.ParcelDataStructOutput,
    currentStatus: bigint,
    contracatualAgreement: string
  ] & {
    id: string;
    token: string;
    tokenId: bigint;
    tokenQuantity: bigint;
    requestedTokenQuantity: bigint;
    price: bigint;
    txFee: bigint;
    customer: string;
    journeyIds: string[];
    nodes: string[];
    locationData: LocationContract.ParcelDataStructOutput;
    currentStatus: bigint;
    contracatualAgreement: string;
  };
}

export interface AurellionAbiInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addReceiver"
      | "assignDriverToJourneyId"
      | "assignJourneyToBox"
      | "boxActivate"
      | "customerHandOff"
      | "customerToJourneyId"
      | "customerToOrderIds"
      | "driverHandOn"
      | "driverToJourneyId"
      | "generateReward"
      | "getjourney"
      | "handOff"
      | "handOn"
      | "idToOrder"
      | "journeyCreation"
      | "journeyIdCounter"
      | "journeyIdToJourney"
      | "journeyToOrderId"
      | "nodeHandOff"
      | "nodeToOrderIds"
      | "numberOfJourneysAssigned"
      | "numberOfJourneysCreatedForCustomer"
      | "numberOfJourneysCreatedForReceiver"
      | "numberToJourneyID"
      | "orderCreation"
      | "orderIds"
      | "orderJourneyCreation"
      | "packageSign"
      | "receiverToJourneyId"
      | "setNodeManager"
      | "subJourneyCount"
      | "subJourneys"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "emitSig" | "printUint"): EventFragment;

  encodeFunctionData(
    functionFragment: "addReceiver",
    values: [BytesLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assignDriverToJourneyId",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assignJourneyToBox",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "boxActivate",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "customerHandOff",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "customerToJourneyId",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "customerToOrderIds",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "driverHandOn",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "driverToJourneyId",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "generateReward",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getjourney",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "handOff",
    values: [AddressLike, AddressLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "handOn",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "idToOrder",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "journeyCreation",
    values: [
      AddressLike,
      AddressLike,
      LocationContract.ParcelDataStruct,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "journeyIdCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "journeyIdToJourney",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "journeyToOrderId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nodeHandOff",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BytesLike,
      BigNumberish[],
      AddressLike,
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "nodeToOrderIds",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfJourneysAssigned",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfJourneysCreatedForCustomer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfJourneysCreatedForReceiver",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "numberToJourneyID",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "orderCreation",
    values: [LocationContract.OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "orderIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "orderJourneyCreation",
    values: [
      BytesLike,
      AddressLike,
      AddressLike,
      LocationContract.ParcelDataStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "packageSign",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "receiverToJourneyId",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNodeManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "subJourneyCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "subJourneys",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignDriverToJourneyId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignJourneyToBox",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "boxActivate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "customerHandOff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "customerToJourneyId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "customerToOrderIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "driverHandOn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "driverToJourneyId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getjourney", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "handOff", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "handOn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "idToOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "journeyCreation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "journeyIdCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "journeyIdToJourney",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "journeyToOrderId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nodeHandOff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nodeToOrderIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfJourneysAssigned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfJourneysCreatedForCustomer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfJourneysCreatedForReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberToJourneyID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orderCreation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orderIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "orderJourneyCreation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "packageSign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiverToJourneyId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNodeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subJourneyCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subJourneys",
    data: BytesLike
  ): Result;
}

export namespace emitSigEvent {
  export type InputTuple = [user: AddressLike, id: BytesLike];
  export type OutputTuple = [user: string, id: string];
  export interface OutputObject {
    user: string;
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace printUintEvent {
  export type InputTuple = [value: BigNumberish];
  export type OutputTuple = [value: bigint];
  export interface OutputObject {
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AurellionAbi extends BaseContract {
  connect(runner?: ContractRunner | null): AurellionAbi;
  waitForDeployment(): Promise<this>;

  interface: AurellionAbiInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addReceiver: TypedContractMethod<
    [orderId: BytesLike, receiver: AddressLike, sender: AddressLike],
    [void],
    "nonpayable"
  >;

  assignDriverToJourneyId: TypedContractMethod<
    [driver: AddressLike, journeyID: BytesLike],
    [void],
    "nonpayable"
  >;

  assignJourneyToBox: TypedContractMethod<
    [journey: BytesLike, box: BigNumberish],
    [void],
    "nonpayable"
  >;

  boxActivate: TypedContractMethod<
    [driver: AddressLike, box: BigNumberish],
    [boolean],
    "view"
  >;

  customerHandOff: TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [boolean],
    "view"
  >;

  customerToJourneyId: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  customerToOrderIds: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  driverHandOn: TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [boolean],
    "view"
  >;

  driverToJourneyId: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  generateReward: TypedContractMethod<
    [id: BytesLike, driver: AddressLike],
    [void],
    "nonpayable"
  >;

  getjourney: TypedContractMethod<
    [id: BytesLike],
    [LocationContract.JourneyStructOutput],
    "view"
  >;

  handOff: TypedContractMethod<
    [
      driver: AddressLike,
      receiver: AddressLike,
      id: BytesLike,
      token: AddressLike
    ],
    [boolean],
    "nonpayable"
  >;

  handOn: TypedContractMethod<
    [driver: AddressLike, sender: AddressLike, id: BytesLike],
    [boolean],
    "nonpayable"
  >;

  idToOrder: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        LocationContract.ParcelDataStructOutput,
        bigint,
        string
      ] & {
        id: string;
        token: string;
        tokenId: bigint;
        tokenQuantity: bigint;
        requestedTokenQuantity: bigint;
        price: bigint;
        txFee: bigint;
        customer: string;
        locationData: LocationContract.ParcelDataStructOutput;
        currentStatus: bigint;
        contracatualAgreement: string;
      }
    ],
    "view"
  >;

  journeyCreation: TypedContractMethod<
    [
      sender: AddressLike,
      receiver: AddressLike,
      _data: LocationContract.ParcelDataStruct,
      bounty: BigNumberish,
      ETA: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  journeyIdCounter: TypedContractMethod<[], [bigint], "view">;

  journeyIdToJourney: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        LocationContract.ParcelDataStructOutput,
        string,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        parcelData: LocationContract.ParcelDataStructOutput;
        journeyId: string;
        currentStatus: bigint;
        sender: string;
        receiver: string;
        driver: string;
        journeyStart: bigint;
        journeyEnd: bigint;
        bounty: bigint;
        ETA: bigint;
      }
    ],
    "view"
  >;

  journeyToOrderId: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  nodeHandOff: TypedContractMethod<
    [
      sendingNode: AddressLike,
      driver: AddressLike,
      receiver: AddressLike,
      id: BytesLike,
      tokenIds: BigNumberish[],
      token: AddressLike,
      quantities: BigNumberish[],
      data: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;

  nodeToOrderIds: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  numberOfJourneysAssigned: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  numberOfJourneysCreatedForCustomer: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  numberOfJourneysCreatedForReceiver: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  numberToJourneyID: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  orderCreation: TypedContractMethod<
    [order: LocationContract.OrderStruct],
    [void],
    "nonpayable"
  >;

  orderIds: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  orderJourneyCreation: TypedContractMethod<
    [
      orderId: BytesLike,
      sender: AddressLike,
      receiver: AddressLike,
      _data: LocationContract.ParcelDataStruct,
      bounty: BigNumberish,
      ETA: BigNumberish,
      tokenQuantity: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  packageSign: TypedContractMethod<
    [driver: AddressLike, sender: AddressLike, id: BytesLike],
    [void],
    "nonpayable"
  >;

  receiverToJourneyId: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  setNodeManager: TypedContractMethod<
    [_nodeManager: AddressLike],
    [void],
    "nonpayable"
  >;

  subJourneyCount: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  subJourneys: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        LocationContract.ParcelDataStructOutput,
        string,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        parcelData: LocationContract.ParcelDataStructOutput;
        journeyId: string;
        currentStatus: bigint;
        sender: string;
        receiver: string;
        driver: string;
        journeyStart: bigint;
        journeyEnd: bigint;
        bounty: bigint;
        ETA: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addReceiver"
  ): TypedContractMethod<
    [orderId: BytesLike, receiver: AddressLike, sender: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "assignDriverToJourneyId"
  ): TypedContractMethod<
    [driver: AddressLike, journeyID: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "assignJourneyToBox"
  ): TypedContractMethod<
    [journey: BytesLike, box: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "boxActivate"
  ): TypedContractMethod<
    [driver: AddressLike, box: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "customerHandOff"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "customerToJourneyId"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "customerToOrderIds"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "driverHandOn"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "driverToJourneyId"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "generateReward"
  ): TypedContractMethod<
    [id: BytesLike, driver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getjourney"
  ): TypedContractMethod<
    [id: BytesLike],
    [LocationContract.JourneyStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "handOff"
  ): TypedContractMethod<
    [
      driver: AddressLike,
      receiver: AddressLike,
      id: BytesLike,
      token: AddressLike
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "handOn"
  ): TypedContractMethod<
    [driver: AddressLike, sender: AddressLike, id: BytesLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "idToOrder"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        LocationContract.ParcelDataStructOutput,
        bigint,
        string
      ] & {
        id: string;
        token: string;
        tokenId: bigint;
        tokenQuantity: bigint;
        requestedTokenQuantity: bigint;
        price: bigint;
        txFee: bigint;
        customer: string;
        locationData: LocationContract.ParcelDataStructOutput;
        currentStatus: bigint;
        contracatualAgreement: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "journeyCreation"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      receiver: AddressLike,
      _data: LocationContract.ParcelDataStruct,
      bounty: BigNumberish,
      ETA: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "journeyIdCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "journeyIdToJourney"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        LocationContract.ParcelDataStructOutput,
        string,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        parcelData: LocationContract.ParcelDataStructOutput;
        journeyId: string;
        currentStatus: bigint;
        sender: string;
        receiver: string;
        driver: string;
        journeyStart: bigint;
        journeyEnd: bigint;
        bounty: bigint;
        ETA: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "journeyToOrderId"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "nodeHandOff"
  ): TypedContractMethod<
    [
      sendingNode: AddressLike,
      driver: AddressLike,
      receiver: AddressLike,
      id: BytesLike,
      tokenIds: BigNumberish[],
      token: AddressLike,
      quantities: BigNumberish[],
      data: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "nodeToOrderIds"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "numberOfJourneysAssigned"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "numberOfJourneysCreatedForCustomer"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "numberOfJourneysCreatedForReceiver"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "numberToJourneyID"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "orderCreation"
  ): TypedContractMethod<
    [order: LocationContract.OrderStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "orderIds"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "orderJourneyCreation"
  ): TypedContractMethod<
    [
      orderId: BytesLike,
      sender: AddressLike,
      receiver: AddressLike,
      _data: LocationContract.ParcelDataStruct,
      bounty: BigNumberish,
      ETA: BigNumberish,
      tokenQuantity: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "packageSign"
  ): TypedContractMethod<
    [driver: AddressLike, sender: AddressLike, id: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "receiverToJourneyId"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "setNodeManager"
  ): TypedContractMethod<[_nodeManager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "subJourneyCount"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "subJourneys"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        LocationContract.ParcelDataStructOutput,
        string,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        parcelData: LocationContract.ParcelDataStructOutput;
        journeyId: string;
        currentStatus: bigint;
        sender: string;
        receiver: string;
        driver: string;
        journeyStart: bigint;
        journeyEnd: bigint;
        bounty: bigint;
        ETA: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "emitSig"
  ): TypedContractEvent<
    emitSigEvent.InputTuple,
    emitSigEvent.OutputTuple,
    emitSigEvent.OutputObject
  >;
  getEvent(
    key: "printUint"
  ): TypedContractEvent<
    printUintEvent.InputTuple,
    printUintEvent.OutputTuple,
    printUintEvent.OutputObject
  >;

  filters: {
    "emitSig(address,bytes32)": TypedContractEvent<
      emitSigEvent.InputTuple,
      emitSigEvent.OutputTuple,
      emitSigEvent.OutputObject
    >;
    emitSig: TypedContractEvent<
      emitSigEvent.InputTuple,
      emitSigEvent.OutputTuple,
      emitSigEvent.OutputObject
    >;

    "printUint(uint256)": TypedContractEvent<
      printUintEvent.InputTuple,
      printUintEvent.OutputTuple,
      printUintEvent.OutputObject
    >;
    printUint: TypedContractEvent<
      printUintEvent.InputTuple,
      printUintEvent.OutputTuple,
      printUintEvent.OutputObject
    >;
  };
}
