/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace AurumNodeManager {
  export type NodeStruct = {
    location: string;
    validNode: BytesLike;
    owner: AddressLike;
    supportedAssets: BigNumberish[];
    status: BytesLike;
    capacity: BigNumberish[];
  };

  export type NodeStructOutput = [
    location: string,
    validNode: string,
    owner: string,
    supportedAssets: bigint[],
    status: string,
    capacity: bigint[]
  ] & {
    location: string;
    validNode: string;
    owner: string;
    supportedAssets: bigint[];
    status: string;
    capacity: bigint[];
  };
}

export interface AurumNodeAbiInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "AllNodes"
      | "addToken"
      | "expensiveFuzzyUpdateCapacity"
      | "gasSafeUpdateCapacity"
      | "getNode"
      | "nodeHandoff"
      | "nodeIdCounter"
      | "nodeList"
      | "ownedNodes"
      | "registerNode"
      | "setAdmin"
      | "updateLocation"
      | "updateOwner"
      | "updateStatus"
      | "updateSupportedAssets"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "eventUpdateAdmin"
      | "eventUpdateLocation"
      | "eventUpdateOwner"
      | "eventUpdateStatus"
      | "eventUpdateSupportedAssets"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "AllNodes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "expensiveFuzzyUpdateCapacity",
    values: [AddressLike, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "gasSafeUpdateCapacity",
    values: [AddressLike, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getNode",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nodeHandoff",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BytesLike,
      BigNumberish[],
      AddressLike,
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "nodeIdCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nodeList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownedNodes",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerNode",
    values: [AurumNodeManager.NodeStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLocation",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOwner",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStatus",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSupportedAssets",
    values: [BigNumberish[], BigNumberish[], AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "AllNodes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "expensiveFuzzyUpdateCapacity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gasSafeUpdateCapacity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nodeHandoff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nodeIdCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nodeList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownedNodes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateLocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSupportedAssets",
    data: BytesLike
  ): Result;
}

export namespace eventUpdateAdminEvent {
  export type InputTuple = [admin: AddressLike];
  export type OutputTuple = [admin: string];
  export interface OutputObject {
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace eventUpdateLocationEvent {
  export type InputTuple = [location: string, node: AddressLike];
  export type OutputTuple = [location: string, node: string];
  export interface OutputObject {
    location: string;
    node: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace eventUpdateOwnerEvent {
  export type InputTuple = [owner: AddressLike, node: AddressLike];
  export type OutputTuple = [owner: string, node: string];
  export interface OutputObject {
    owner: string;
    node: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace eventUpdateStatusEvent {
  export type InputTuple = [status: BytesLike, node: AddressLike];
  export type OutputTuple = [status: string, node: string];
  export interface OutputObject {
    status: string;
    node: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace eventUpdateSupportedAssetsEvent {
  export type InputTuple = [
    supportedAssets: string[],
    capacity: BigNumberish[]
  ];
  export type OutputTuple = [supportedAssets: string[], capacity: bigint[]];
  export interface OutputObject {
    supportedAssets: string[];
    capacity: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AurumNodeAbi extends BaseContract {
  connect(runner?: ContractRunner | null): AurumNodeAbi;
  waitForDeployment(): Promise<this>;

  interface: AurumNodeAbiInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  AllNodes: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, string] & {
        location: string;
        validNode: string;
        owner: string;
        status: string;
      }
    ],
    "view"
  >;

  addToken: TypedContractMethod<[_auraGoat: AddressLike], [void], "nonpayable">;

  expensiveFuzzyUpdateCapacity: TypedContractMethod<
    [node: AddressLike, quantities: BigNumberish[], assets: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  gasSafeUpdateCapacity: TypedContractMethod<
    [node: AddressLike, quantities: BigNumberish[], assets: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  getNode: TypedContractMethod<
    [nodeAddress: AddressLike],
    [AurumNodeManager.NodeStructOutput],
    "view"
  >;

  nodeHandoff: TypedContractMethod<
    [
      node: AddressLike,
      driver: AddressLike,
      reciever: AddressLike,
      id: BytesLike,
      tokenIds: BigNumberish[],
      token: AddressLike,
      quantities: BigNumberish[],
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  nodeIdCounter: TypedContractMethod<[], [bigint], "view">;

  nodeList: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  ownedNodes: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  registerNode: TypedContractMethod<
    [node: AurumNodeManager.NodeStruct],
    [string],
    "nonpayable"
  >;

  setAdmin: TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;

  updateLocation: TypedContractMethod<
    [location: string, node: AddressLike],
    [void],
    "nonpayable"
  >;

  updateOwner: TypedContractMethod<
    [owner: AddressLike, node: AddressLike],
    [void],
    "nonpayable"
  >;

  updateStatus: TypedContractMethod<
    [status: BytesLike, node: AddressLike],
    [void],
    "nonpayable"
  >;

  updateSupportedAssets: TypedContractMethod<
    [
      supportedAssetsList: BigNumberish[],
      capacity: BigNumberish[],
      nodeAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "AllNodes"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, string] & {
        location: string;
        validNode: string;
        owner: string;
        status: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "addToken"
  ): TypedContractMethod<[_auraGoat: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "expensiveFuzzyUpdateCapacity"
  ): TypedContractMethod<
    [node: AddressLike, quantities: BigNumberish[], assets: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "gasSafeUpdateCapacity"
  ): TypedContractMethod<
    [node: AddressLike, quantities: BigNumberish[], assets: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getNode"
  ): TypedContractMethod<
    [nodeAddress: AddressLike],
    [AurumNodeManager.NodeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "nodeHandoff"
  ): TypedContractMethod<
    [
      node: AddressLike,
      driver: AddressLike,
      reciever: AddressLike,
      id: BytesLike,
      tokenIds: BigNumberish[],
      token: AddressLike,
      quantities: BigNumberish[],
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "nodeIdCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nodeList"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "ownedNodes"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerNode"
  ): TypedContractMethod<
    [node: AurumNodeManager.NodeStruct],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAdmin"
  ): TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateLocation"
  ): TypedContractMethod<
    [location: string, node: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateOwner"
  ): TypedContractMethod<
    [owner: AddressLike, node: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateStatus"
  ): TypedContractMethod<
    [status: BytesLike, node: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateSupportedAssets"
  ): TypedContractMethod<
    [
      supportedAssetsList: BigNumberish[],
      capacity: BigNumberish[],
      nodeAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "eventUpdateAdmin"
  ): TypedContractEvent<
    eventUpdateAdminEvent.InputTuple,
    eventUpdateAdminEvent.OutputTuple,
    eventUpdateAdminEvent.OutputObject
  >;
  getEvent(
    key: "eventUpdateLocation"
  ): TypedContractEvent<
    eventUpdateLocationEvent.InputTuple,
    eventUpdateLocationEvent.OutputTuple,
    eventUpdateLocationEvent.OutputObject
  >;
  getEvent(
    key: "eventUpdateOwner"
  ): TypedContractEvent<
    eventUpdateOwnerEvent.InputTuple,
    eventUpdateOwnerEvent.OutputTuple,
    eventUpdateOwnerEvent.OutputObject
  >;
  getEvent(
    key: "eventUpdateStatus"
  ): TypedContractEvent<
    eventUpdateStatusEvent.InputTuple,
    eventUpdateStatusEvent.OutputTuple,
    eventUpdateStatusEvent.OutputObject
  >;
  getEvent(
    key: "eventUpdateSupportedAssets"
  ): TypedContractEvent<
    eventUpdateSupportedAssetsEvent.InputTuple,
    eventUpdateSupportedAssetsEvent.OutputTuple,
    eventUpdateSupportedAssetsEvent.OutputObject
  >;

  filters: {
    "eventUpdateAdmin(address)": TypedContractEvent<
      eventUpdateAdminEvent.InputTuple,
      eventUpdateAdminEvent.OutputTuple,
      eventUpdateAdminEvent.OutputObject
    >;
    eventUpdateAdmin: TypedContractEvent<
      eventUpdateAdminEvent.InputTuple,
      eventUpdateAdminEvent.OutputTuple,
      eventUpdateAdminEvent.OutputObject
    >;

    "eventUpdateLocation(string,address)": TypedContractEvent<
      eventUpdateLocationEvent.InputTuple,
      eventUpdateLocationEvent.OutputTuple,
      eventUpdateLocationEvent.OutputObject
    >;
    eventUpdateLocation: TypedContractEvent<
      eventUpdateLocationEvent.InputTuple,
      eventUpdateLocationEvent.OutputTuple,
      eventUpdateLocationEvent.OutputObject
    >;

    "eventUpdateOwner(address,address)": TypedContractEvent<
      eventUpdateOwnerEvent.InputTuple,
      eventUpdateOwnerEvent.OutputTuple,
      eventUpdateOwnerEvent.OutputObject
    >;
    eventUpdateOwner: TypedContractEvent<
      eventUpdateOwnerEvent.InputTuple,
      eventUpdateOwnerEvent.OutputTuple,
      eventUpdateOwnerEvent.OutputObject
    >;

    "eventUpdateStatus(bytes1,address)": TypedContractEvent<
      eventUpdateStatusEvent.InputTuple,
      eventUpdateStatusEvent.OutputTuple,
      eventUpdateStatusEvent.OutputObject
    >;
    eventUpdateStatus: TypedContractEvent<
      eventUpdateStatusEvent.InputTuple,
      eventUpdateStatusEvent.OutputTuple,
      eventUpdateStatusEvent.OutputObject
    >;

    "eventUpdateSupportedAssets(string[],uint256[])": TypedContractEvent<
      eventUpdateSupportedAssetsEvent.InputTuple,
      eventUpdateSupportedAssetsEvent.OutputTuple,
      eventUpdateSupportedAssetsEvent.OutputObject
    >;
    eventUpdateSupportedAssets: TypedContractEvent<
      eventUpdateSupportedAssetsEvent.InputTuple,
      eventUpdateSupportedAssetsEvent.OutputTuple,
      eventUpdateSupportedAssetsEvent.OutputObject
    >;
  };
}
